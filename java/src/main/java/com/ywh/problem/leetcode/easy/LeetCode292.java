package com.ywh.problem.leetcode.easy;

/**
 * Nim 游戏
 * [脑筋急转弯] [极小化极大]
 *
 * 你和你的朋友，两个人一起玩 Nim 游戏：
 *      桌子上有一堆石头。
 *      你们轮流进行自己的回合，你作为先手。
 *      每一回合，轮到的人拿掉 1 - 3 块石头。
 *      拿掉最后一块石头的人就是获胜者。
 * 假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。
 * 如果可以赢，返回 true；否则，返回 false 。
 * 示例 1：
 *      输入：n = 4
 *      输出：false
 *      解释：如果堆中有 4 块石头，那么你永远不会赢得比赛；因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
 * 示例 2：
 *      输入：n = 1
 *      输出：true
 * 示例 3：
 *      输入：n = 2
 *      输出：true
 * 提示：
 *      1 <= n <= 2^31 - 1
 *
 * @author ywh
 * @since 2020/12/11/011
 */
public class LeetCode292 {

    /**
     * Time: O(1), Space: O(1)
     *
     * @param n
     * @return
     */
    public boolean canWinNim(int n) {
        // 如果石头堆中有 1、2、3 块，则在一个回合内可以全部被取走。
        // 如果石头堆中有 4 块，则无论取多少块，下一回合都必然会被对手全部取走。
        // 因此要避免在自己的回合中石头数量为 4 的情况（5 取 1、6 取 2、7 取 3，把 4 留给对手）。
        // 只要在自己的回合中剩余石头数量不为 4 的倍数就能获得胜利。
        return n % 4 != 0;
    }

}
